一、缘起
一个http请求从客户端到服务端，整个执行流程是怎么样的呢？
http请求典型流程
一个典型流程如上：
(1)客户端通过域名daojia.com请求dns-server
(2)dns-server返回域名对应的外网ip(1.2.3.4)
(3)客户端访问外网ip(1.2.3.4)向反向代理nginx
(4)反向代理nginx配置了多个后端web-server服务内网ip(192.168.0.1/192.168.0.2)
(5)请求最终落到某一个web-server进行处理

其中，第一个步骤域名daojia.com到外网ip(1.2.3.4)的转换，发生在整个服务端外部，服务端不可控。

架构设计时，能够巧用dns做一些什么事情呢，是本文要讨论的问题。

二、反向代理水平扩展
http请求典型流程
典型的互联网架构中，可以通过增加web-server来扩充web层的性能，但反向代理nginx仍是整个系统的唯一入口，如果系统吞吐超过nginx的性能极限，难以扩容，此时就需要dns-server来配合水平扩展。
反向代理水平扩展
具体做法是：在dns-server对于同一个域名可以配置多个nginx的外网ip，每次dns解析请求，轮询返回不同的ip，这样就能实现nginx的水平扩展，这个方法叫“dns轮询”。

三、web-server负载均衡
web-server负载均衡
既然“dns轮询”可以将同一个域名的流量均匀分配到不同的nginx，那么也可以利用它来做web-server的负载均衡：
(1)架构中去掉nginx层
(2)将多个web-server的内网ip直接改为外网ip
(3)在dns-server将域名对应的外网ip进行轮询解析 

和nginx相比，dns来实施负载均衡有什么优缺点呢？
优点：
•利用第三方dns实施，服务端架构不用动
•少了一层网络请求

不足：
•dns只具备解析功能，不能保证对应外网ip的可用性（即使能够做80口的探测，实时性肯定也是比nginx差很多的），而nginx做反向代理时，与web-server之间有保活探测机制，当web-server挂掉时，能够自动迁移流量
•当web-server需要扩容时，通过dns扩容生效时间长，而nginx是服务端完全自己可控的部分，web-server扩容更实时更方便

因为上面两个原因，架构上很少取消反向代理层，而直接使用dns来实施负载均衡。

四、用户就近访问
用户就近访问
如文章“缘起”中所述，http请求的第一个步骤域名到外网ip的转换，发生在整个服务端外部，服务端不可控，那么如果要实施“根据客户端ip来分配最近的服务器机房访问”，就只能在dns-server上做了：
(1)电信用户想要访问某一个服务器资源
(2)浏览器向dns-server发起服务器域名解析请求
(3)dns-server识别出访问者是电信用户
(4)dns-server将电信机房的nginx外网ip返回给访问者
(5)访问者就近访问

根据用户ip来返回最近的服务器ip，称为“智能dns”，cdn以及多机房多活中最常用。

五、总结
架构设计中，dns有它独特的功能和作用：
•dns轮询，水平扩展反向代理层
•去掉反向代理层，利用dns实施负载均衡
•智能dns，根据用户ip来就近访问服务器